# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import crud_pb2 as crud__pb2


class MovieBookingServiceStub(object):
    """Service APIs
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.makeBooking = channel.unary_unary(
                '/MovieBookingService/makeBooking',
                request_serializer=crud__pb2.BookingQuery.SerializeToString,
                response_deserializer=crud__pb2.BookingDetails.FromString,
                )
        self.getBookingDetails = channel.unary_unary(
                '/MovieBookingService/getBookingDetails',
                request_serializer=crud__pb2.BookingQuery.SerializeToString,
                response_deserializer=crud__pb2.BookingDetails.FromString,
                )
        self.getAllBookingsByLocation = channel.unary_stream(
                '/MovieBookingService/getAllBookingsByLocation',
                request_serializer=crud__pb2.BookingQuery.SerializeToString,
                response_deserializer=crud__pb2.BookingDetails.FromString,
                )
        self.getAllBookingsByName = channel.unary_stream(
                '/MovieBookingService/getAllBookingsByName',
                request_serializer=crud__pb2.BookingQuery.SerializeToString,
                response_deserializer=crud__pb2.BookingDetails.FromString,
                )
        self.getAllBookingsByMovie = channel.unary_stream(
                '/MovieBookingService/getAllBookingsByMovie',
                request_serializer=crud__pb2.BookingQuery.SerializeToString,
                response_deserializer=crud__pb2.BookingDetails.FromString,
                )
        self.testService = channel.unary_unary(
                '/MovieBookingService/testService',
                request_serializer=crud__pb2.TestRequest.SerializeToString,
                response_deserializer=crud__pb2.TestResponse.FromString,
                )


class MovieBookingServiceServicer(object):
    """Service APIs
    """

    def makeBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBookingDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllBookingsByLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllBookingsByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllBookingsByMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def testService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MovieBookingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'makeBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.makeBooking,
                    request_deserializer=crud__pb2.BookingQuery.FromString,
                    response_serializer=crud__pb2.BookingDetails.SerializeToString,
            ),
            'getBookingDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.getBookingDetails,
                    request_deserializer=crud__pb2.BookingQuery.FromString,
                    response_serializer=crud__pb2.BookingDetails.SerializeToString,
            ),
            'getAllBookingsByLocation': grpc.unary_stream_rpc_method_handler(
                    servicer.getAllBookingsByLocation,
                    request_deserializer=crud__pb2.BookingQuery.FromString,
                    response_serializer=crud__pb2.BookingDetails.SerializeToString,
            ),
            'getAllBookingsByName': grpc.unary_stream_rpc_method_handler(
                    servicer.getAllBookingsByName,
                    request_deserializer=crud__pb2.BookingQuery.FromString,
                    response_serializer=crud__pb2.BookingDetails.SerializeToString,
            ),
            'getAllBookingsByMovie': grpc.unary_stream_rpc_method_handler(
                    servicer.getAllBookingsByMovie,
                    request_deserializer=crud__pb2.BookingQuery.FromString,
                    response_serializer=crud__pb2.BookingDetails.SerializeToString,
            ),
            'testService': grpc.unary_unary_rpc_method_handler(
                    servicer.testService,
                    request_deserializer=crud__pb2.TestRequest.FromString,
                    response_serializer=crud__pb2.TestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MovieBookingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MovieBookingService(object):
    """Service APIs
    """

    @staticmethod
    def makeBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieBookingService/makeBooking',
            crud__pb2.BookingQuery.SerializeToString,
            crud__pb2.BookingDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBookingDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieBookingService/getBookingDetails',
            crud__pb2.BookingQuery.SerializeToString,
            crud__pb2.BookingDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllBookingsByLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MovieBookingService/getAllBookingsByLocation',
            crud__pb2.BookingQuery.SerializeToString,
            crud__pb2.BookingDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllBookingsByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MovieBookingService/getAllBookingsByName',
            crud__pb2.BookingQuery.SerializeToString,
            crud__pb2.BookingDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllBookingsByMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MovieBookingService/getAllBookingsByMovie',
            crud__pb2.BookingQuery.SerializeToString,
            crud__pb2.BookingDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def testService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MovieBookingService/testService',
            crud__pb2.TestRequest.SerializeToString,
            crud__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
